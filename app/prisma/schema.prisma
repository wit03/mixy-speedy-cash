// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  customerId   String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid 
  customerType CustomerType
  citizenId    String
  email        String       @unique
  password     String
  firstName    String
  lastName     String
  dateOfBirth  DateTime
  phoneNumber  String
  address      String
  
  career String
  salary Decimal


  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())
  account       Account[]
}

enum CustomerType {
  personal
  company
}

model Employee {
  employeeId  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  position    Position
  password String
  lastName    String
  firstName   String
  dateOfBirth DateTime
  email       String
  phoneNumber String
  address     String
  salary      Decimal
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  Loans         Loan[]
  Notifications Notification[]
}

enum Position {
  employee  
  manager
  owner
}

model Account {
  accountId String @id @unique

  customer   Customer @relation(fields: [customerId], references: [customerId])
  customerId String   @db.Uuid
  
  pin String


  balance       Float
  accountType   AccountType
  accountStatus AccountStatus
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())

  accountSender   Transaction[] @relation("accountSender")
  accountReciever Transaction[] @relation("accountReciever")
  Loans           Loan[]
  notifications Notification[]
}

enum AccountType {
  deposit
  saving
}

enum AccountStatus {
  inUse
  closed
}

model Loan {
  loanId String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  responsibleEmployeeId String?   @db.Uuid // EmployeeId
  Employee              Employee? @relation(fields: [responsibleEmployeeId], references: [employeeId])

  accountId String
  account   Account @relation(fields: [accountId], references: [accountId])

  loanType     LoanType
  loanAmount   Float
  interestRate Float
  loanStatus   LoanStatus

  endDate      DateTime?
  startDate    DateTime?     
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())

  loanPayments LoanPayment[]
}

enum LoanType {
  // normal is 3% interest 
  // took 6 month to paid
  normal
  // special is 3.5% interest 
  // took 12 month to paid
  special
}

enum LoanStatus {
  waiting
  onProcess
  inDebt 
  decline
}


model LoanPayment {
  loanId String @db.Uuid
  Loan   Loan   @relation(fields: [loanId], references: [loanId])

  loanPaymentId String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  
  scheduledPaymentDate DateTime?
  // เงินต้น
  principalAmount      Float
  // เงินที่ต้องจ่าย
  paymentAmount        Float
  // เงินดอกเบี้ยที่ต้องจ่าย
  interestPercent       Float
  // จ่ายมาแล้วเท่าไร
  paidAmount           Float
  // วันที่จ่าย
  paidDate             DateTime?
  
  paidStatus PaidStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum PaidStatus {
  paid
  inDept
  onProcess
}

model Transaction {
  transactionId String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  detail        String
  sender        String
  accountSender Account @relation("accountSender", fields: [sender], references: [accountId])

  reciever        String
  accountReciever Account @relation("accountReciever", fields: [reciever], references: [accountId])

  transactionType TransactionType @default(transfer)
  amount          Float
  transactionDate DateTime @default(now())
  updatedAt       DateTime @default(now())
}

enum TransactionType {
  transfer
  loan
}

model Notification {
  notiId           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  reciever         String   @db.Uuid
  customerReciever Account @relation(fields: [reciever], references: [accountId])

  createdBy       String   @db.Uuid // employee
  employeeCreated Employee @relation(fields: [createdBy], references: [employeeId])

  text        String
  read        Boolean
  publishedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}
