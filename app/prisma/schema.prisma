// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  customerId   String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid 
  customerType CustomerType
  citizenId    String
  email        String       @unique
  password     String
  firstName    String
  lastName     String
  dateOfBirth  DateTime
  phoneNumber  String
  address      String
  
  career String
  salary Decimal


  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())
  Account       Account[]
  Notifications Notification[]
}

enum CustomerType {
  Personal
  Company
}

model Employee {
  employeeId  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  position    Position
  password String
  kastName    String
  firstName   String
  dateOfBirth DateTime
  email       String
  phoneNumber String
  address     String
  salary      Decimal
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  Loans         Loan[]
  Notifications Notification[]
}

enum Position {
  employee
  manager
  owner
}

model Account {
  accountId String @id @unique

  customer   Customer @relation(fields: [customerId], references: [customerId])
  customerId String   @db.Uuid
  
  pin String


  balance       Float
  accountType   AccountType
  accountStatus AccountStatus
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())

  AccountSender   Transaction[] @relation("AccountSender")
  AccountReceiver Transaction[] @relation("AccountReceiver")
  Loans           Loan[]
}

enum AccountType {
  Deposit
  Saving
}

enum AccountStatus {
  InUse
  Closed
}

model Loan {
  loanId String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  responsibleEmployeeId String   @db.Uuid // EmployeeId
  Employee              Employee @relation(fields: [responsibleEmployeeId], references: [employeeId])

  accountId String
  Account   Account @relation(fields: [accountId], references: [accountId])

  loanType     LoanType
  loanAmount   Float
  interestRate Float
  loanStatus   LoanStatus

  endDate      DateTime
  startDate    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  LoanPayments LoanPayment[]
}

enum LoanType {
  normal
  special
}

enum LoanStatus {
  onProcess
  inDebt
}

model LoanPayment {
  loanId String @db.Uuid
  Loan   Loan   @relation(fields: [loanId], references: [loanId])

  loanPaymentId String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  scheduledPaymentDate DateTime
  paymentAmount        Float
  principalAmount      Float
  interestAmount       Float
  paidAmount           Float
  paidDate             DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Transaction {
  transactionId String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  detail        String
  sender        String
  AccountSender Account @relation("AccountSender", fields: [sender], references: [accountId])

  receiver        String
  AccountReceiver Account @relation("AccountReceiver", fields: [receiver], references: [accountId])

  // TransactionType String
  amount          Float
  transactionDate DateTime @default(now())
  updatedAt       DateTime @default(now())
}

model Notification {
  notiId           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  receiver         String   @db.Uuid
  CustomerReceiver Customer @relation(fields: [receiver], references: [customerId])

  createdBy       String   @db.Uuid // employee
  EmployeeCreated Employee @relation(fields: [createdBy], references: [employeeId])

  text        String
  read        Boolean
  publishedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}
